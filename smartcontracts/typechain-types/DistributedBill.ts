/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DistributedBillInterface extends utils.Interface {
  functions: {
    "billCounter()": FunctionFragment;
    "billIdtoBill(uint256)": FunctionFragment;
    "buyertoBillId(address)": FunctionFragment;
    "createBill(address,string,string,uint256[])": FunctionFragment;
    "getBuyerInventoryIds(address)": FunctionFragment;
    "getSellerInventoryIds(address)": FunctionFragment;
    "sellertoBillId(address)": FunctionFragment;
    "updateInventory(address,uint256[])": FunctionFragment;
    "updatePaid(address,bool)": FunctionFragment;
    "updateShippingAddress(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "billCounter"
      | "billIdtoBill"
      | "buyertoBillId"
      | "createBill"
      | "getBuyerInventoryIds"
      | "getSellerInventoryIds"
      | "sellertoBillId"
      | "updateInventory"
      | "updatePaid"
      | "updateShippingAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "billCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "billIdtoBill",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyertoBillId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBill",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerInventoryIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellerInventoryIds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sellertoBillId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInventory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePaid",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateShippingAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "billCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "billIdtoBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyertoBillId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerInventoryIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellerInventoryIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellertoBillId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInventory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePaid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateShippingAddress",
    data: BytesLike
  ): Result;

  events: {
    "InventoryUpdated(address,uint256[])": EventFragment;
    "MagicMessage(string)": EventFragment;
    "PaymentToggle(bool)": EventFragment;
    "ShippingUpdated(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InventoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MagicMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentToggle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShippingUpdated"): EventFragment;
}

export interface InventoryUpdatedEventObject {
  updatedBy: string;
  inventory: BigNumber[];
}
export type InventoryUpdatedEvent = TypedEvent<
  [string, BigNumber[]],
  InventoryUpdatedEventObject
>;

export type InventoryUpdatedEventFilter =
  TypedEventFilter<InventoryUpdatedEvent>;

export interface MagicMessageEventObject {
  message: string;
}
export type MagicMessageEvent = TypedEvent<[string], MagicMessageEventObject>;

export type MagicMessageEventFilter = TypedEventFilter<MagicMessageEvent>;

export interface PaymentToggleEventObject {
  isPaid: boolean;
}
export type PaymentToggleEvent = TypedEvent<
  [boolean],
  PaymentToggleEventObject
>;

export type PaymentToggleEventFilter = TypedEventFilter<PaymentToggleEvent>;

export interface ShippingUpdatedEventObject {
  shippingAddress: string;
}
export type ShippingUpdatedEvent = TypedEvent<
  [string],
  ShippingUpdatedEventObject
>;

export type ShippingUpdatedEventFilter = TypedEventFilter<ShippingUpdatedEvent>;

export interface DistributedBill extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DistributedBillInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    billCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    billIdtoBill(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, BigNumber, boolean] & {
        billId: BigNumber;
        seller: string;
        buyer: string;
        shippingAddress: string;
        originAddress: string;
        dateCreated: BigNumber;
        isPaid: boolean;
      }
    >;

    buyertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createBill(
      _sellerAddress: PromiseOrValue<string>,
      shippingAddress: PromiseOrValue<string>,
      originAddress: PromiseOrValue<string>,
      inventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBuyerInventoryIds(
      _buyerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getSellerInventoryIds(
      _sellerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    sellertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateInventory(
      _sellerAddress: PromiseOrValue<string>,
      _newInventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePaid(
      _buyerAddress: PromiseOrValue<string>,
      _isPaid: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateShippingAddress(
      _sellerAddress: PromiseOrValue<string>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  billCounter(overrides?: CallOverrides): Promise<BigNumber>;

  billIdtoBill(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, BigNumber, boolean] & {
      billId: BigNumber;
      seller: string;
      buyer: string;
      shippingAddress: string;
      originAddress: string;
      dateCreated: BigNumber;
      isPaid: boolean;
    }
  >;

  buyertoBillId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createBill(
    _sellerAddress: PromiseOrValue<string>,
    shippingAddress: PromiseOrValue<string>,
    originAddress: PromiseOrValue<string>,
    inventoryIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBuyerInventoryIds(
    _buyerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getSellerInventoryIds(
    _sellerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  sellertoBillId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateInventory(
    _sellerAddress: PromiseOrValue<string>,
    _newInventoryIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePaid(
    _buyerAddress: PromiseOrValue<string>,
    _isPaid: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateShippingAddress(
    _sellerAddress: PromiseOrValue<string>,
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    billCounter(overrides?: CallOverrides): Promise<BigNumber>;

    billIdtoBill(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, BigNumber, boolean] & {
        billId: BigNumber;
        seller: string;
        buyer: string;
        shippingAddress: string;
        originAddress: string;
        dateCreated: BigNumber;
        isPaid: boolean;
      }
    >;

    buyertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBill(
      _sellerAddress: PromiseOrValue<string>,
      shippingAddress: PromiseOrValue<string>,
      originAddress: PromiseOrValue<string>,
      inventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBuyerInventoryIds(
      _buyerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getSellerInventoryIds(
      _sellerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    sellertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateInventory(
      _sellerAddress: PromiseOrValue<string>,
      _newInventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    updatePaid(
      _buyerAddress: PromiseOrValue<string>,
      _isPaid: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateShippingAddress(
      _sellerAddress: PromiseOrValue<string>,
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "InventoryUpdated(address,uint256[])"(
      updatedBy?: null,
      inventory?: null
    ): InventoryUpdatedEventFilter;
    InventoryUpdated(
      updatedBy?: null,
      inventory?: null
    ): InventoryUpdatedEventFilter;

    "MagicMessage(string)"(message?: null): MagicMessageEventFilter;
    MagicMessage(message?: null): MagicMessageEventFilter;

    "PaymentToggle(bool)"(isPaid?: null): PaymentToggleEventFilter;
    PaymentToggle(isPaid?: null): PaymentToggleEventFilter;

    "ShippingUpdated(string)"(
      shippingAddress?: null
    ): ShippingUpdatedEventFilter;
    ShippingUpdated(shippingAddress?: null): ShippingUpdatedEventFilter;
  };

  estimateGas: {
    billCounter(overrides?: CallOverrides): Promise<BigNumber>;

    billIdtoBill(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createBill(
      _sellerAddress: PromiseOrValue<string>,
      shippingAddress: PromiseOrValue<string>,
      originAddress: PromiseOrValue<string>,
      inventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBuyerInventoryIds(
      _buyerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSellerInventoryIds(
      _sellerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateInventory(
      _sellerAddress: PromiseOrValue<string>,
      _newInventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePaid(
      _buyerAddress: PromiseOrValue<string>,
      _isPaid: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateShippingAddress(
      _sellerAddress: PromiseOrValue<string>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    billCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    billIdtoBill(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBill(
      _sellerAddress: PromiseOrValue<string>,
      shippingAddress: PromiseOrValue<string>,
      originAddress: PromiseOrValue<string>,
      inventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBuyerInventoryIds(
      _buyerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSellerInventoryIds(
      _sellerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellertoBillId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateInventory(
      _sellerAddress: PromiseOrValue<string>,
      _newInventoryIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePaid(
      _buyerAddress: PromiseOrValue<string>,
      _isPaid: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateShippingAddress(
      _sellerAddress: PromiseOrValue<string>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
